import getpass
import os
import uuid
from typing import Annotated

from arcade.sdk import ToolContext, tool

# redisvl imports
from redisvl.index import SearchIndex
from redisvl.query import VectorQuery
from redisvl.utils.vectorize import OpenAITextVectorizer

"""
This module provides a series of Arcade tools that allow storing
summarized information in Redis and later querying it. Similar to
@search, these tools create and use a Redis index for storing text fields
and a vector field for embeddings.

Globals that read from the environment on startup:
- REDIS_URL (the Redis connection URL)
- SUMMARIES_INDEX_NAME (the name of the Redis index for summaries)
- OPENAI_API_KEY (your OpenAI API key)
"""

# ------------------------------------------------------------------
# Global configuration
# ------------------------------------------------------------------

REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379")
SUMMARIES_INDEX_NAME = os.environ.get("SUMMARIES_INDEX_NAME", "my-summaries-index")

# Initialize OpenAI API key (use env var or prompt for input)
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# Initialize the vectorizer
vectorizer = OpenAITextVectorizer(
    model="text-embedding-ada-002",
    api_config={"api_key": OPENAI_API_KEY},
)

# Define the Redis index schema for storing summaries
summaries_schema = {
    "index": {
        "name": SUMMARIES_INDEX_NAME,
        "prefix": "summaries",
        "storage_type": "hash",
    },
    "fields": [
        {"name": "summary_id", "type": "tag"},
        {"name": "summary_text", "type": "text"},
        {
            "name": "summary_vector",
            "type": "vector",
            "attrs": {
                "dims": 1536,
                "distance_metric": "cosine",
                "algorithm": "flat",
                "datatype": "float32",
            },
        },
    ],
}


def get_summaries_index(overwrite: bool = False) -> SearchIndex:
    """
    Retrieve (and create if necessary) the Redis index for storing summaries.
    """
    index = SearchIndex.from_dict(summaries_schema)
    index.connect(REDIS_URL)
    index.create(overwrite=overwrite)  # automatically creates if missing
    return index


@tool
def store_summarized_information(
    context: ToolContext,
    summary_text: Annotated[str, "The summarized text to store"],
) -> str:
    """
    Store summarized information in Redis along with its vector embedding.
    Returns the autogenerated summary ID.
    """
    index = get_summaries_index()

    # Generate an ID for this piece of information
    summary_id = f"summaries:{uuid.uuid4()}"

    # Vectorize the summary text
    embedding = vectorizer.embed(summary_text, as_buffer=True, dtype="float32")

    # Prepare the document to store
    doc = {
        "summary_id": summary_id,  # used as a Tag field for easy filtering
        "summary_text": summary_text,  # store original text
        "summary_vector": embedding,  # store vector embedding
    }

    # Load into Redis
    index.load([doc], id_field="summary_id")

    return summary_id


@tool
def search_summarized_information(
    context: ToolContext,
    query_text: Annotated[str, "The query text to search for relevant summaries"],
    num_results: Annotated[int, "Number of results to return"] = 5,
) -> list[dict[str, str]]:
    """
    Query stored summaries in Redis by embedding similarity to the given query.
    Returns a list of matching summaries, each with the text and distance score.
    """
    index = get_summaries_index()

    # Vectorize the query
    query_embedding = vectorizer.embed(query_text, as_buffer=True, dtype="float32")

    # Build the vector query
    vector_query = VectorQuery(
        vector=query_embedding,
        vector_field_name="summary_vector",
        return_fields=["summary_id", "summary_text"],
        num_results=num_results,
    )

    # Execute the query
    results = index.query(vector_query)

    # Format the output
    output = []
    for result in results:
        output.append({
            "summary_id": result.get("summary_id", "N/A"),
            "summary_text": result.get("summary_text", "N/A"),
            "vector_distance": result.get("vector_distance", "N/A"),
        })

    return output
